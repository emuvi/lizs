-- If is in a repository root then fetch it

is_in_repo_root = liz.is_dir("./.git")

-- Else try to find the Code root to fetch then all

if not is_in_repo_root then
   code_root_path = liz.path_parent_find(".", "Code")
end

if not is_in_repo_root and code_root_path == "" then
   print("Could not determine a course of action to take.")
   return
end

all_spawned = {}

if is_in_repo_root then
   project = liz.path_absolute(".")
   print("Updating on project path: " .. project)
   table.insert(all_spawned, {project, liz.spawn("update.path", {project})})
else
   print("Updating on Code path: " .. code_root_path)
   code_root = liz.path_list_dirs(code_root_path)
   for _, category in ipairs(code_root) do
      projects = liz.path_list_dirs(category)
      for _, project in ipairs(projects) do
         table.insert(all_spawned, {project, liz.spawn("update.path", {project})})
      end
   end
end

for _, spawned in ipairs(all_spawned) do
   local project = spawned[1]
   local spawned_results = liz.join(spawned[2])
   local returned_should = liz.from_json(spawned_results[1])
   local returned_code = liz.from_json(spawned_results[2])
   local returned_status = liz.from_json(spawned_results[3])
   if returned_should then
      print("x----------------------------------------------------x")
      print("Update to project path: " .. project)
      print(returned_status)
      print("")
      local descriptor = liz.trim(liz.ask("Descriptor: "))
      print("")
      if descriptor == "" then
         print("The descriptor can't be empty, skipping this update.")
      else
         liz.cmd("git", {"add", "-A"}, project, true, true)
         liz.cmd("git", {"commit", "-m", descriptor}, project, true, true)
         liz.cmd("git", {"push"}, project, true, true)
      end
   elseif returned_code ~= 0 then
      print("x----------------------------------------------------x")
      print("Error on project path: " .. project)
      print(returned_status)
      liz.pause()
   end
end
print("x----------------------------------------------------x")
