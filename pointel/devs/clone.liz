function IsAim(name)
   return Liz.starts_with(name, "aim-")
end

function IsApp(checker)
   return Liz.contains(checker, "application")
end

function IsCmd(checker)
   return Liz.contains(checker, "command")
end

function IsWeb(checker)
   return Liz.contains(checker, "webmedia")
end

DevsRootPath = Liz.path_parent_find(".", "Devs")

if DevsRootPath == "" then
   print("Could not found the Devs root path.")
   return
end

print("Cloning on Devs path: " .. DevsRootPath)

local codePath = "Code"
local aimsPath = "Code/aims"
local appsPath = "Code/apps"
local cmdsPath = "Code/cmds"
local websPath = "Code/webs"

Liz.cd(DevsRootPath)
Liz.mkdir(codePath)
Liz.mkdir(aimsPath)
Liz.mkdir(appsPath)
Liz.mkdir(cmdsPath)
Liz.mkdir(websPath)

local failed = {}

local all_aims = {}
local all_apps = {}
local all_cmds = {}
local all_webs = {}

local clone_page = 0
local repo_index = 0
while true do
   clone_page = clone_page + 1
   local resp = Liz.get("https://api.github.com/users/emuvi/repos?page=" .. tostring(clone_page))
   local repos = Liz.from_json(resp)
   local page_empty = true
   for _, repo in pairs(repos) do
      page_empty = false
      repo_index = repo_index + 1
      local name = repo["name"]
      print("Cloning [" .. tostring(repo_index) .. "] - " .. name)
      local description = repo["description"]
      print(description)
      local to_clone = repo["clone_url"]
      local checker = Liz.tolower(description)
      local destiny = ""
      if (IsAim(name)) then
         destiny = "./Code/aims/"
         table.insert(all_aims, name)
      elseif (IsApp(checker)) then
         destiny = "./Code/apps/"
         table.insert(all_apps, name)
      elseif (IsCmd(checker)) then
         destiny = "./Code/cmds/"
         table.insert(all_cmds, name)
      elseif (IsWeb(checker)) then
         destiny = "./Code/webs/"
         table.insert(all_webs, name)
      end
      if destiny == "" then
         print("ERROR: Could not determine the nature of this repository.")
         table.insert(failed, name)
      else
         local destiny_name = destiny .. "/" .. name
         if Liz.has(destiny_name) then
            print("The repository already exists, it will be pulled.")
            local code, output = Liz.cmd("git", {"pull"}, destiny_name, false, false)
            if code ~= 0 then
               table.insert(failed, name)
            end
            print(output)
         else
            print("The repository does not exists, it will be cloned.")
            local code, output = Liz.cmd("git", {"clone", to_clone}, destiny, false, false)
            if code ~= 0 then
               table.insert(failed, name)
            end
            print(output)
         end
      end
      print("x----------------------------------------------------x")
   end
   if page_empty or true then
      break;
   end
end
local first_failed = true
for _, fail in pairs(failed) do
   if first_failed then
      first_failed = false
      print("ERROR - Was not possible to clone:")
   end
   print(fail)
end
if not first_failed then
   print("x----------------------------------------------------x")
end
print("|                                                    |")
print("|            Finished to Clone Pointel!              |")
print("|                                                    |")
print("x----------------------------------------------------x")

local del_olds = Liz.ask_bool("Do you wish to remove old projects that was not found on the repository?")
if not del_olds then
   return
end

for _, aimFolder in pairs(Liz.path_list_dirs(aimsPath)) do
   local aimFolder = Liz.path_name(aimFolder)
   print("Check if " .. aimFolder .. " is on the repository.")
   local found = false
   for _, aim in pairs(all_aims) do
      if aim == aimFolder then
         found = true
         break
      end
   end
   Liz.pause()
   if not found then
      print("Removing " .. aimFolder .. " from the repository.")
      if Liz.rm(aimsPath .. "/" .. aimFolder) then
         print("Removed " .. aimFolder)
      else
         print("Could not remove " .. aimFolder)
      end
   end
end