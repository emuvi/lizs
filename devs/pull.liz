-- If is in a repository root then fetch it

IsInRepoRoot = Liz.is_dir("./.git")

-- Else try to find the Code root to fetch then all

if not IsInRepoRoot then
   CodeRootPath = Liz.path_parent_find(".", "Code")
end

if not IsInRepoRoot and CodeRootPath == "" then
   print("Could not determine a course of action to take.")
   return
end

local all_spawned = {}

if IsInRepoRoot then
   Project = Liz.path_absolute(".")
   print("Pulling on project path: " .. Project)
   table.insert(all_spawned, { Project, Liz.spawn("pull.path", { Project }) })
else
   print("Pulling on Code path: " .. CodeRootPath)
   local code_root = Liz.path_list_dirs(CodeRootPath)
   for _, category in ipairs(code_root) do
      local projects = Liz.path_list_dirs(category)
      for _, project in ipairs(projects) do
         table.insert(all_spawned, { project, Liz.spawn("pull.path", { project }) })
      end
   end
end

AnyIsError = false
for _, spawned in ipairs(all_spawned) do
   local project = spawned[1]
   print("x----------------------------------------------------x")
   print("Pulling on project path: " .. project)
   local spawned_results = Liz.join(spawned[2])
   local returned_code = Liz.from_json(spawned_results[1])
   if returned_code ~= 0 then
      AnyIsError = true
   end
   local returned_output = Liz.from_json(spawned_results[2])
   print("[" .. returned_code .. "] - " .. returned_output)
end
print("+----------------------------------------------------+")
print("|                                                    |")
if not AnyIsError then
   print("|                Everything pulled.                  |")
else
   print("|     There was [ ERROR(s) ] in some project(s)!     |")
end
print("|                                                    |")
print("+----------------------------------------------------+")
